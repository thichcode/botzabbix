import os
import logging
import time
import io
import datetime
import matplotlib.pyplot as plt
import matplotlib.dates as mdates
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes
from zabbix import get_zabbix_api
from decorators import admin_only
from utils import format_timestamp

logger = logging.getLogger(__name__)

ADMIN_IDS = [int(id) for id in os.getenv('ADMIN_IDS', '').split(',') if id]

class GetGraphCommand:
    @admin_only
    async def execute(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        if not context.args:
            await update.message.reply_text(
                "Vui l√≤ng nh·∫≠p t√™n host ho·∫∑c IP ƒë·ªÉ t√¨m ki·∫øm.\n"
                "V√≠ d·ª•: /graph server01 ho·∫∑c /graph 192.168.1.100"
            )
            return

        search_term = ' '.join(context.args)
        
        try:
            await update.message.reply_text(f"ƒêang t√¨m ki·∫øm host: {search_term}...")
            
            zapi = get_zabbix_api()
            host = self._find_host(zapi, search_term)
            
            if not host:
                await update.message.reply_text(f"Kh√¥ng t√¨m th·∫•y host v·ªõi t√™n ho·∫∑c IP: {search_term}")
                return

            await update.message.reply_text(f"ƒêang t√¨m ki·∫øm items cho host: {host['host']}...")
            
            # L·∫•y danh s√°ch items ph·ªï bi·∫øn
            items = self._get_common_items(zapi, host['hostid'])
            
            if not items:
                await update.message.reply_text(f"Kh√¥ng t√¨m th·∫•y items n√†o cho host: {host['host']}")
                return

            # T·∫°o g·ª£i √Ω cho user
            await self._show_item_suggestions(update, host, items)
            
        except Exception as e:
            logger.error(f"Error in get_graph: {str(e)}")
            await update.message.reply_text(f"L·ªói khi t√¨m ki·∫øm: {str(e)}")

    def _find_host(self, zapi, search_term):
        """T√¨m host theo t√™n ho·∫∑c IP"""
        # T√¨m theo t√™n host ch√≠nh x√°c
        hosts = zapi.host.get({
            "output": ["hostid", "host", "name", "status"],
            "selectInterfaces": ["ip"],
            "filter": {"host": [search_term]}
        })
        
        if hosts:
            return hosts[0]
        
        # T√¨m theo IP
        hosts = zapi.host.get({
            "output": ["hostid", "host", "name", "status"],
            "selectInterfaces": ["ip"],
            "search": {"ip": search_term}
        })
        
        if hosts:
            return hosts[0]
        
        # T√¨m theo t√™n hi·ªÉn th·ªã
        hosts = zapi.host.get({
            "output": ["hostid", "host", "name", "status"],
            "selectInterfaces": ["ip"],
            "search": {"name": search_term}
        })
        
        if hosts:
            return hosts[0]
        
        # T√¨m g·∫ßn ƒë√∫ng (fuzzy search)
        hosts = zapi.host.get({
            "output": ["hostid", "host", "name", "status"],
            "selectInterfaces": ["ip"],
            "search": {"host": search_term}
        })
        
        return hosts[0] if hosts else None

    def _get_common_items(self, zapi, hostid):
        """L·∫•y danh s√°ch items ph·ªï bi·∫øn cho monitoring"""
        common_item_keys = [
            # CPU
            'system.cpu.util[,user]',
            'system.cpu.util[,system]',
            'system.cpu.util[,iowait]',
            'system.cpu.util[,idle]',
            'system.cpu.load[percpu,avg1]',
            'system.cpu.load[percpu,avg5]',
            'system.cpu.load[percpu,avg15]',
            
            # Memory
            'vm.memory.utilization',
            'vm.memory.size[available]',
            'vm.memory.size[total]',
            'vm.memory.size[used]',
            'vm.memory.size[free]',
            
            # Disk
            'vfs.fs.size[/,total]',
            'vfs.fs.size[/,used]',
            'vfs.fs.size[/,free]',
            'vfs.fs.size[/,pused]',
            'vfs.fs.inode[/,total]',
            'vfs.fs.inode[/,used]',
            'vfs.fs.inode[/,free]',
            
            # Network
            'net.if.in[*]',
            'net.if.out[*]',
            'net.if.total[*]',
            'net.if.in.dropped[*]',
            'net.if.out.dropped[*]',
            'net.if.in.errors[*]',
            'net.if.out.errors[*]',
            
            # System
            'system.uptime',
            'system.localtime',
            'system.swap.size[,total]',
            'system.swap.size[,free]',
            'system.swap.size[,used]',
            
            # Processes
            'proc.num[]',
            'proc.num[,,run]',
            'proc.num[,,sleep]',
            'proc.num[,,zombie]',
            
            # Services
            'net.tcp.port[,80]',
            'net.tcp.port[,443]',
            'net.tcp.port[,22]',
            'net.tcp.port[,3306]',
            'net.tcp.port[,5432]'
        ]
        
        items = []
        for key in common_item_keys:
            found_items = zapi.item.get({
                "hostids": [hostid],
                "search": {"key_": key},
                "output": ["itemid", "name", "key_", "units", "lastvalue", "lastclock"],
                "sortfield": "name",
                "limit": 1
            })
            
            if found_items:
                items.append(found_items[0])
        
        return items

    async def _show_item_suggestions(self, update, host, items):
        """Hi·ªÉn th·ªã g·ª£i √Ω items cho user"""
        host_info = f"üñ•Ô∏è **Host:** {host['host']}\n"
        if host['name'] != host['host']:
            host_info += f"üìù **T√™n hi·ªÉn th·ªã:** {host['name']}\n"
        host_info += f"üåê **IP:** {host['interfaces'][0]['ip'] if host['interfaces'] else 'N/A'}\n"
        host_info += f"üìä **T√¨m th·∫•y {len(items)} items ph·ªï bi·∫øn**\n\n"
        
        # Nh√≥m items theo category
        categories = {
            'CPU': [],
            'Memory': [],
            'Disk': [],
            'Network': [],
            'System': [],
            'Processes': [],
            'Services': []
        }
        
        for item in items:
            key = item['key_']
            if 'cpu' in key.lower():
                categories['CPU'].append(item)
            elif 'memory' in key.lower() or 'vm.memory' in key:
                categories['Memory'].append(item)
            elif 'fs.size' in key or 'fs.inode' in key:
                categories['Disk'].append(item)
            elif 'net.if' in key or 'net.tcp' in key:
                categories['Network'].append(item)
            elif 'proc' in key:
                categories['Processes'].append(item)
            elif 'system.' in key and 'cpu' not in key:
                categories['System'].append(item)
            else:
                categories['Services'].append(item)
        
        # T·∫°o message v·ªõi g·ª£i √Ω
        message = host_info
        message += "**Ch·ªçn item ƒë·ªÉ xem bi·ªÉu ƒë·ªì:**\n\n"
        
        # Hi·ªÉn th·ªã t·ª´ng category
        for category, category_items in categories.items():
            if category_items:
                message += f"**{category}:**\n"
                for i, item in enumerate(category_items[:3], 1):  # Gi·ªõi h·∫°n 3 items m·ªói category
                    last_value = item.get('lastvalue', 'N/A')
                    units = item.get('units', '')
                    if units:
                        last_value += f" {units}"
                    
                    message += f"{i}. {item['name']}\n"
                    message += f"   üìä Gi√° tr·ªã hi·ªán t·∫°i: {last_value}\n"
                    message += f"   üîó Key: `{item['key_']}`\n\n"
        
        # T·∫°o inline keyboard cho c√°c l·ª±a ch·ªçn nhanh
        keyboard = []
        row = []
        
        # Th√™m c√°c n√∫t cho CPU, Memory, Disk, Network
        quick_items = [
            ('CPU', 'system.cpu.util[,user]'),
            ('Memory', 'vm.memory.utilization'),
            ('Disk', 'vfs.fs.size[/,pused]'),
            ('Network', 'net.if.in[*]')
        ]
        
        for label, key in quick_items:
            # T√¨m item t∆∞∆°ng ·ª©ng
            matching_items = [item for item in items if key in item['key_']]
            if matching_items:
                item = matching_items[0]
                callback_data = f"graph_{host['hostid']}_{item['itemid']}_3600"  # 1 hour default
                row.append(InlineKeyboardButton(f"üìà {label}", callback_data=callback_data))
                
                if len(row) == 2:
                    keyboard.append(row)
                    row = []
        
        if row:
            keyboard.append(row)
        
        # Th√™m n√∫t t√¨m ki·∫øm th√™m
        keyboard.append([InlineKeyboardButton("üîç T√¨m ki·∫øm th√™m items", callback_data=f"search_items_{host['hostid']}")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text(
            message,
            reply_markup=reply_markup,
            parse_mode='Markdown'
        )

    async def create_graph(self, update, hostid, itemid, period=3600):
        """T·∫°o bi·ªÉu ƒë·ªì cho item c·ª• th·ªÉ"""
        try:
            zapi = get_zabbix_api()
            
            # L·∫•y th√¥ng tin item
            items = zapi.item.get({
                "itemids": [itemid],
                "output": ["name", "units", "hostid"]
            })
            
            if not items:
                await update.message.reply_text("Kh√¥ng t√¨m th·∫•y item")
                return
            
            item = items[0]
            
            # L·∫•y th√¥ng tin host
            hosts = zapi.host.get({
                "hostids": [item['hostid']],
                "output": ["host"]
            })
            
            host_name = hosts[0]['host'] if hosts else "Unknown"
            
            # L·∫•y d·ªØ li·ªáu l·ªãch s·ª≠
            time_till = int(time.time())
            time_from = time_till - period
            
            history = zapi.history.get({
                "itemids": itemid,
                "time_from": time_from,
                "time_till": time_till,
                "output": "extend",
                "sortfield": "clock",
                "sortorder": "ASC"
            })
            
            if not history:
                await update.message.reply_text("Kh√¥ng c√≥ d·ªØ li·ªáu l·ªãch s·ª≠ cho item n√†y")
                return
            
            # T·∫°o bi·ªÉu ƒë·ªì
            plt.figure(figsize=(12, 8))
            times = [datetime.datetime.fromtimestamp(int(h["clock"])) for h in history]
            values = [float(h["value"]) for h in history]
            
            plt.plot(times, values, linewidth=2, color='#2E86AB')
            plt.title(f"{item['name']} - {host_name}", fontsize=14, fontweight='bold')
            plt.xlabel("Th·ªùi gian", fontsize=12)
            plt.ylabel(f"Gi√° tr·ªã ({item['units']})" if item['units'] else "Gi√° tr·ªã", fontsize=12)
            plt.grid(True, alpha=0.3)
            plt.gcf().autofmt_xdate()
            
            # Format tr·ª•c th·ªùi gian
            if period <= 3600:  # 1 gi·ªù
                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%H:%M'))
            elif period <= 86400:  # 1 ng√†y
                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%H:%M'))
            else:  # Nhi·ªÅu ng√†y
                plt.gca().xaxis.set_major_formatter(mdates.DateFormatter('%m-%d %H:%M'))
            
            # Th√™m th√¥ng tin
            current_value = values[-1] if values else 0
            avg_value = sum(values) / len(values) if values else 0
            max_value = max(values) if values else 0
            min_value = min(values) if values else 0
            
            info_text = f"Hi·ªán t·∫°i: {current_value:.2f}\nTrung b√¨nh: {avg_value:.2f}\nMax: {max_value:.2f}\nMin: {min_value:.2f}"
            plt.figtext(0.02, 0.02, info_text, fontsize=10, bbox=dict(boxstyle="round,pad=0.3", facecolor="lightgray", alpha=0.8))
            
            buf = io.BytesIO()
            plt.savefig(buf, format='png', bbox_inches='tight', dpi=150)
            buf.seek(0)
            plt.close()
            
            # T·∫°o caption
            period_text = "1 gi·ªù" if period == 3600 else f"{period//3600} gi·ªù" if period < 86400 else f"{period//86400} ng√†y"
            caption = f"üìä **{item['name']}**\nüñ•Ô∏è Host: {host_name}\n‚è∞ Kho·∫£ng th·ªùi gian: {period_text}\nüìà S·ªë ƒëi·ªÉm d·ªØ li·ªáu: {len(history)}"
            
            await update.message.reply_photo(
                photo=buf,
                caption=caption,
                parse_mode='Markdown'
            )
            
        except Exception as e:
            logger.error(f"Error creating graph: {str(e)}")
            await update.message.reply_text(f"L·ªói khi t·∫°o bi·ªÉu ƒë·ªì: {str(e)}")
