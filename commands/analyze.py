import os
import logging
import time
from telegram import Update
from telegram.ext import ContextTypes
from zabbix import get_zabbix_api
from decorators import admin_only

logger = logging.getLogger(__name__)

class AnalyzeCommand:
    @admin_only
    async def execute(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        try:
            await update.message.reply_text("ƒêang ph√¢n t√≠ch history problems trong 3 ng√†y qua...")
            zapi = get_zabbix_api()
            end_time = int(time.time())
            start_time = end_time - 86400 * 3  # 3 days

            # L·∫•y problems trong 3 ng√†y qua
            problems = zapi.problem.get({
                "output": ["objectid", "name", "clock", "severity", "acknowledged"],
                "selectHosts": ["host"],
                "time_from": start_time,
                "time_till": end_time,
                "sortfield": "clock",
                "sortorder": "DESC"
            })

            if not problems:
                await update.message.reply_text("Kh√¥ng c√≥ problems n√†o trong 3 ng√†y qua ƒë·ªÉ ph√¢n t√≠ch.")
                return

            # L·∫•y th√¥ng tin trigger cho m·ªói problem
            trigger_ids = [problem["objectid"] for problem in problems]
            triggers = zapi.trigger.get({
                "output": ["triggerid", "description", "priority", "dependencies"],
                "triggerids": trigger_ids
            })

            # T·∫°o mapping trigger_id -> trigger
            trigger_map = {trigger["triggerid"]: trigger for trigger in triggers}

            # Ph√¢n t√≠ch d·ªØ li·ªáu
            analysis_data = self._analyze_problems(problems, trigger_map)
            
            # T·∫°o b√°o c√°o
            report = self._generate_report(analysis_data)
            
            await update.message.reply_text(report)
            
        except Exception as e:
            logger.error(f"Error in analyze_and_predict: {str(e)}")
            await update.message.reply_text(f"L·ªói khi ph√¢n t√≠ch v√† d·ª± ƒëo√°n: {str(e)}")

    def _analyze_problems(self, problems, trigger_map):
        """Ph√¢n t√≠ch problems v√† t√¨m m·ªëi quan h·ªá"""
        analysis = {
            'total_problems': len(problems),
            'host_problems': {},
            'severity_distribution': {},
            'time_distribution': {},
            'problem_patterns': {},
            'host_dependencies': {},
            'critical_hosts': set(),
            'problem_clusters': []
        }

        # Ph√¢n t√≠ch t·ª´ng problem
        for problem in problems:
            trigger_id = problem["objectid"]
            host = problem['hosts'][0]['host'] if problem['hosts'] else "Unknown"
            severity = int(problem['severity'])
            timestamp = int(problem['clock'])
            day = time.strftime('%Y-%m-%d', time.localtime(timestamp))
            hour = time.strftime('%H', time.localtime(timestamp))

            # Th·ªëng k√™ theo host
            if host not in analysis['host_problems']:
                analysis['host_problems'][host] = {
                    'count': 0,
                    'severities': [],
                    'problems': [],
                    'last_problem': None
                }
            
            analysis['host_problems'][host]['count'] += 1
            analysis['host_problems'][host]['severities'].append(severity)
            analysis['host_problems'][host]['problems'].append(problem)
            
            if not analysis['host_problems'][host]['last_problem'] or timestamp > int(analysis['host_problems'][host]['last_problem']['clock']):
                analysis['host_problems'][host]['last_problem'] = problem

            # Th·ªëng k√™ theo severity
            if severity not in analysis['severity_distribution']:
                analysis['severity_distribution'][severity] = 0
            analysis['severity_distribution'][severity] += 1

            # Th·ªëng k√™ theo th·ªùi gian
            if day not in analysis['time_distribution']:
                analysis['time_distribution'][day] = {'total': 0, 'hours': {}}
            analysis['time_distribution'][day]['total'] += 1
            
            if hour not in analysis['time_distribution'][day]['hours']:
                analysis['time_distribution'][day]['hours'][hour] = 0
            analysis['time_distribution'][day]['hours'][hour] += 1

            # Ph√¢n t√≠ch pattern
            if trigger_id in trigger_map:
                trigger = trigger_map[trigger_id]
                description = trigger.get('description', problem['name'])
                
                if description not in analysis['problem_patterns']:
                    analysis['problem_patterns'][description] = {
                        'count': 0,
                        'hosts': set(),
                        'severities': []
                    }
                
                analysis['problem_patterns'][description]['count'] += 1
                analysis['problem_patterns'][description]['hosts'].add(host)
                analysis['problem_patterns'][description]['severities'].append(severity)

            # X√°c ƒë·ªãnh critical hosts (severity >= 4)
            if severity >= 4:
                analysis['critical_hosts'].add(host)

        # Ph√¢n t√≠ch m·ªëi quan h·ªá gi·ªØa c√°c host
        analysis['host_dependencies'] = self._analyze_host_dependencies(problems, trigger_map)
        
        # T√¨m clusters c·ªßa problems
        analysis['problem_clusters'] = self._find_problem_clusters(problems, trigger_map)

        return analysis

    def _analyze_host_dependencies(self, problems, trigger_map):
        """Ph√¢n t√≠ch m·ªëi quan h·ªá ph·ª• thu·ªôc gi·ªØa c√°c host"""
        dependencies = {}
        
        for problem in problems:
            trigger_id = problem["objectid"]
            host = problem['hosts'][0]['host'] if problem['hosts'] else "Unknown"
            
            if trigger_id in trigger_map:
                trigger = trigger_map[trigger_id]
                trigger_deps = trigger.get('dependencies', [])
                
                if trigger_deps:
                    if host not in dependencies:
                        dependencies[host] = {'depends_on': set(), 'depended_by': set()}
                    
                    # Host n√†y ph·ª• thu·ªôc v√†o c√°c trigger kh√°c
                    for dep_trigger_id in trigger_deps:
                        # T√¨m host c·ªßa trigger dependency
                        for other_problem in problems:
                            if other_problem["objectid"] == dep_trigger_id:
                                dep_host = other_problem['hosts'][0]['host'] if other_problem['hosts'] else "Unknown"
                                dependencies[host]['depends_on'].add(dep_host)
                                
                                if dep_host not in dependencies:
                                    dependencies[dep_host] = {'depends_on': set(), 'depended_by': set()}
                                dependencies[dep_host]['depended_by'].add(host)
                                break

        return dependencies

    def _find_problem_clusters(self, problems, trigger_map):
        """T√¨m c√°c cluster c·ªßa problems x·∫£y ra c√πng th·ªùi gian"""
        clusters = []
        time_window = 300  # 5 ph√∫t
        
        # S·∫Øp x·∫øp problems theo th·ªùi gian
        sorted_problems = sorted(problems, key=lambda x: int(x['clock']))
        
        current_cluster = []
        for problem in sorted_problems:
            if not current_cluster:
                current_cluster = [problem]
            else:
                # Ki·ªÉm tra xem problem n√†y c√≥ thu·ªôc cluster hi·ªán t·∫°i kh√¥ng
                last_problem_time = int(current_cluster[-1]['clock'])
                current_problem_time = int(problem['clock'])
                
                if current_problem_time - last_problem_time <= time_window:
                    current_cluster.append(problem)
                else:
                    # K·∫øt th√∫c cluster hi·ªán t·∫°i
                    if len(current_cluster) > 1:
                        clusters.append(current_cluster)
                    current_cluster = [problem]
        
        # Th√™m cluster cu·ªëi c√πng
        if len(current_cluster) > 1:
            clusters.append(current_cluster)
        
        return clusters

    def _generate_report(self, analysis):
        """T·∫°o b√°o c√°o ph√¢n t√≠ch"""
        report = "üîç **B√ÅO C√ÅO PH√ÇN T√çCH PROBLEMS (3 NG√ÄY QUA)**\n\n"
        
        # T·ªïng quan
        report += f"üìä **T·ªïng quan:**\n"
        report += f"- T·ªïng s·ªë problems: {analysis['total_problems']}\n"
        report += f"- S·ªë host b·ªã ·∫£nh h∆∞·ªüng: {len(analysis['host_problems'])}\n"
        report += f"- Hosts critical (severity >= 4): {len(analysis['critical_hosts'])}\n\n"
        
        # Ph√¢n b·ªë severity
        report += "üö® **Ph√¢n b·ªë m·ª©c ƒë·ªô nghi√™m tr·ªçng:**\n"
        severity_names = {0: 'Not classified', 1: 'Information', 2: 'Warning', 3: 'Average', 4: 'High', 5: 'Disaster'}
        for severity, count in sorted(analysis['severity_distribution'].items()):
            severity_name = severity_names.get(severity, f'Level {severity}')
            report += f"- {severity_name}: {count} problems\n"
        report += "\n"
        
        # Hosts c√≥ nhi·ªÅu problems nh·∫•t
        report += "üñ•Ô∏è **Hosts c√≥ nhi·ªÅu problems nh·∫•t:**\n"
        sorted_hosts = sorted(analysis['host_problems'].items(), key=lambda x: x[1]['count'], reverse=True)[:5]
        for host, data in sorted_hosts:
            avg_severity = sum(data['severities']) / len(data['severities'])
            report += f"- {host}: {data['count']} problems (avg severity: {avg_severity:.1f})\n"
        report += "\n"
        
        # Patterns ph·ªï bi·∫øn
        report += "üìã **Patterns ph·ªï bi·∫øn:**\n"
        sorted_patterns = sorted(analysis['problem_patterns'].items(), key=lambda x: x[1]['count'], reverse=True)[:3]
        for pattern, data in sorted_patterns:
            hosts_list = ', '.join(list(data['hosts'])[:3])
            if len(data['hosts']) > 3:
                hosts_list += f" v√† {len(data['hosts']) - 3} hosts kh√°c"
            report += f"- {pattern}: {data['count']} l·∫ßn (hosts: {hosts_list})\n"
        report += "\n"
        
        # Critical hosts
        if analysis['critical_hosts']:
            report += "‚ö†Ô∏è **Hosts Critical c·∫ßn ch√∫ √Ω:**\n"
            for host in analysis['critical_hosts']:
                report += f"- {host}\n"
            report += "\n"
        
        # M·ªëi quan h·ªá ph·ª• thu·ªôc
        if analysis['host_dependencies']:
            report += "üîó **M·ªëi quan h·ªá ph·ª• thu·ªôc:**\n"
            for host, deps in analysis['host_dependencies'].items():
                if deps['depends_on']:
                    depends_on = ', '.join(deps['depends_on'])
                    report += f"- {host} ph·ª• thu·ªôc v√†o: {depends_on}\n"
                if deps['depended_by']:
                    depended_by = ', '.join(deps['depended_by'])
                    report += f"- {host} ·∫£nh h∆∞·ªüng ƒë·∫øn: {depended_by}\n"
            report += "\n"
        
        # Problem clusters
        if analysis['problem_clusters']:
            report += "‚ö° **Clusters problems (x·∫£y ra c√πng l√∫c):**\n"
            for i, cluster in enumerate(analysis['problem_clusters'][:3], 1):
                hosts_in_cluster = set()
                for problem in cluster:
                    host = problem['hosts'][0]['host'] if problem['hosts'] else "Unknown"
                    hosts_in_cluster.add(host)
                hosts_str = ', '.join(hosts_in_cluster)
                report += f"- Cluster {i}: {len(cluster)} problems tr√™n {len(hosts_in_cluster)} hosts ({hosts_str})\n"
            report += "\n"
        
        # D·ª± ƒëo√°n
        report += "üîÆ **D·ª∞ ƒêO√ÅN V√Ä KHUY·∫æN NGH·ªä:**\n"
        
        # D·ª± ƒëo√°n d·ª±a tr√™n patterns
        if sorted_patterns:
            most_frequent_pattern = sorted_patterns[0]
            report += f"- Pattern '{most_frequent_pattern[0]}' c√≥ kh·∫£ nƒÉng cao s·∫Ω x·∫£y ra l·∫°i\n"
        
        # D·ª± ƒëo√°n d·ª±a tr√™n hosts
        if sorted_hosts:
            most_affected_host = sorted_hosts[0]
            report += f"- Host '{most_affected_host[0]}' c√≥ nguy c∆° cao g·∫∑p v·∫•n ƒë·ªÅ ti·∫øp theo\n"
        
        # D·ª± ƒëo√°n d·ª±a tr√™n dependencies
        critical_dependencies = []
        for host, deps in analysis['host_dependencies'].items():
            if deps['depended_by'] and host in analysis['critical_hosts']:
                critical_dependencies.append((host, deps['depended_by']))
        
        if critical_dependencies:
            report += "- C√°c host critical c√≥ th·ªÉ ·∫£nh h∆∞·ªüng ƒë·∫øn nhi·ªÅu host kh√°c:\n"
            for host, affected_hosts in critical_dependencies[:3]:
                affected_list = ', '.join(list(affected_hosts)[:3])
                report += f"  + {host} ‚Üí {affected_list}\n"
        
        # Khuy·∫øn ngh·ªã
        report += "\nüí° **KHUY·∫æN NGH·ªä:**\n"
        if analysis['critical_hosts']:
            report += "- ∆Øu ti√™n ki·ªÉm tra v√† kh·∫Øc ph·ª•c c√°c hosts critical\n"
        if analysis['problem_clusters']:
            report += "- C√≥ th·ªÉ c√≥ v·∫•n ƒë·ªÅ chung g√¢y ra nhi·ªÅu problems c√πng l√∫c\n"
        if analysis['host_dependencies']:
            report += "- Ki·ªÉm tra m·ªëi quan h·ªá ph·ª• thu·ªôc gi·ªØa c√°c hosts\n"
        report += "- TƒÉng c∆∞·ªùng monitoring cho c√°c hosts c√≥ nhi·ªÅu problems\n"
        report += "- Xem x√©t c·∫≠p nh·∫≠t c·∫•u h√¨nh ho·∫∑c thay th·∫ø thi·∫øt b·ªã c√≥ v·∫•n ƒë·ªÅ\n"
        
        return report
